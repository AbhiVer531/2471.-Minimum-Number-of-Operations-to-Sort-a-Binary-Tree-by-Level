# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def minimumOperations(self, root: Optional[TreeNode]) -> int:
        queue = deque([root])
        count = 0
        while queue:
            level_size = len(queue)
            level_values = []
            for i in range(0,level_size):
                node = queue.popleft()
                level_values.append(node.val)
                if node.left:
                    queue.append(node.left)
                if node.right:
                    queue.append(node.right)
            count = count + self.helper(level_values)
        return count
    def helper(self, original):
        swaps = 0
        List_Sorted = sorted(original)
        map = {val: index for index, val in enumerate(original)}

        for i in range(0,len(original)):
            if original[i] != List_Sorted[i]:
                swaps+=1
            curr = map[List_Sorted[i]]
            map[original[i]] = curr
            original[curr] = original[i]
        return swaps
